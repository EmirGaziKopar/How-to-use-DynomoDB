1.step //Created Table 

var params = {


	TableName: 'Image'
	

};


console.log








--------------------------------------------------------------------------------------------------------------------------------------------------







2.step //Created Table and Created PrimaryKeys


var params = {


	TableName: 'Image'
	KeySchema: [
		{
		AttributeName: 'Id',
		KeyType: 'HASH' //hash key
		}
		
		{
	
	AttributeDefinitions: [ //Yukarıda keyType yazmıştık burada da Özniteliklerin tanımlarını yapıyoruz 
		{
			AttributeName: 'Id',
			AttributeType: 'S'  //string
		}
	
	]
		
	],

	//if you wish more parameters ... 
	

};


console.log


----------------------------------------------------------------------------------------------------------------------------------------------


3.step Provisioned Throught  //DynomoDB de size gereken kadar ReadCapacity ve WriteCapacity'i yazacağınız kısım 


// ACTIVE before you can use it. See also dynamodb.waitFor().
var params = {
    TableName: 'Image',
    KeySchema: [
        {
            AttributeName: 'Id',
            KeyType: 'HASH'
        }
    ],
    AttributeDefinitions: [
        {
            AttributeName: 'Id',
            AttributeType: 'S'
        }
    ],
    ProvisionedThroughput:  {//you specify how much provisioned throughput capacity you want to reserve for reads and writes 
        ReadCapacityUnits: 1,
        WriteCapacityUnits: 1
    }
};



-------------------------------------------------------------------------------------------------------------------------------------------------


Bir tablo oluşturduğunuzda onun active hale gelmesini beklemeniz gerekir . Ancak bu eğitim DynomoDB local'i çağırdığından , tablolar hemen Aktif hale gelir 
aşşapıdaki kodlarla beraber tamamen oluşturulmuş bir Create table isteğiniz olduğuna göre onu çalıştırın. 
çalışırmak için play butoon veya ctrl+enter kombinasyonunu kullanın 


4.Step // Tablo'yu tamamlama 

var params = {
    TableName: 'Image',
    KeySchema: [
        {
            AttributeName: 'Id',
            KeyType: 'HASH'
        }
    ],
    AttributeDefinitions: [
        {
            AttributeName: 'Id',
            AttributeType: 'S'
        }
    ],
    ProvisionedThroughput:  {
        ReadCapacityUnits: 1,
        WriteCapacityUnits: 1
    }
};
console.log("Creating the Image table");
dynamodb.createTable(params, function(err, data) {   //Creating the Image Table 
    if (err) ppJson(err); // an error occurred (hata)
    else ppJson(data); // successful response (başarılı)
});//Creating the Image Table-------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------------------


5.Step //Put item (Adding Items to Image Table)(Görüntü tablosuna item ekleme)


(en)
// The PutItem API inserts a new item into DynamoDB.
// If an item already exists with the same primary key value,
// the item is replaced with the new item.
// The API has several other useful parameters not shown here, including:
// * Expected: DynamoDB will perform the write only if certain attributes
// match the values you expect them to have
// * ReturnValues: DynamoDB can return the value you are replacing

(tr)
// PutItem API, DynamoDB'ye yeni bir öğe ekler.
// Aynı birincil anahtar değerine sahip bir öğe zaten mevcutsa,
// öğe yeni öğe ile değiştirilir.
// API'nin burada gösterilmeyen birkaç başka yararlı parametresi vardır, örneğin:
// * Beklenen: DynamoDB, yazma işlemini yalnızca belirli öznitelikler varsa gerçekleştirecektir
// sahip olmalarını beklediğiniz değerleri eşleştirin
// * ReturnValues: DynamoDB, değiştirdiğiniz değeri döndürebilir

var params = {
    TableName: 'Image',
    Item: {
        Id: 'dynamodb.png',
        DateAdded: new Date().toISOString(),
        VoteCount: 0
    }
};
console.log("Calling PutItem");
ppJson(params);
docClient.put(params, function(err, data) { //Burada yapılan işlemle beraber görüntü tabloya yüklenir 
    if (err) ppJson(err); // an error occurred
    else console.log("PutItem returned successfully");//"PutItem başarıyla iade edildi"
});

*********************************************				
çıktı(output): 

	"TableName":"Image"

		"Item" {
		"Id":"dynomodb.png"
		"DateAdded":"2021-05..."
		"VoreCount":0


		} 



------------------------------------------------------------------------------------------------------------------------------------------------

6.Step GetItem // Yeni Resim Item'inizi Getirme

(tr)
// GetItem, bir öğeyi tam birincil anahtarına göre alır.
// Bu API ayrıca aşağıdakiler arasında seçim yapmak için bir ConsistentRead parametresine sahiptir
// kesinlikle ve nihayetinde tutarlı okuma tutarlılığı
(en)
// GetItem retrieves an item by its exact primary key.
// This API also has a ConsistentRead parameter for choosing between
// strictly and eventually consistent read consistency

var params = {
    TableName: 'Image',
    Key: {
        Id: 'dynamodb.png'
    }
};
console.log("Calling GetItem");
docClient.get(params, function(err, data) {
    if (err) ppJson(err); // an error occurred
    else ppJson(data); // successful response
});



****************************************************

çıktı(output) : 

Calling GetItem:



		"Item" {
		"DateAdded":"2021-05..."
		"VoreCount":0
		"Id":"dynomodb.png"


		} 

---------------------------------------------------------------------------------------------------------------------------------------------


7. Step  BatchWriteItem(Toplu Yazma Öğesi) step Daha Fazla Veri Ekleyip İşleri İlginç Hale Getirme 

(en)
// The BatchWriteItem takes up to 25 requests, some of which may succeed,
// and others needing to be retried. This example program takes in a list of requests
// that is larger than the batch size, and calls BatchWriteItem multiple times until
// all of the items have been written.


(tr)
// BatchWriteItem, bazıları başarılı olabilen en fazla 25 istek alır,
// ve yeniden denenmesi gereken diğerleri. Bu örnek program bir istek listesi alır
// toplu iş boyutundan daha büyüktür ve BatchWriteItem'i birden çok kez çağırana kadar
// tüm öğeler yazılmıştır


// The BatchWriteItem takes up to 25 requests, some of which may succeed,
// and others needing to be retried. This example program takes in a list of requests
// that is larger than the batch size, and calls BatchWriteItem multiple times until
// all of the items have been written.


var params = {
    // RequestItems is a map of TableName to Requests
    RequestItems: {
        Image: [
            {
                PutRequest: {
                    Item: {
                        Id: 'sqs.png',
                        DateAdded: new Date().toISOString(),
                        VoteCount: 0 
                    }
                }
            },
            {
                PutRequest: {
                    Item: {
                        Id: 'kinesis.png',
                        DateAdded: new Date().toISOString(),
                        VoteCount: 0
                    }
                }
            }
        ]
    }
};

// (en)Generate some more requests and add them to the params map 
// (tr) Daha fazla istek üretin ve bunları params haritasına ekleyin

var urls = [ 'android.png', 'appstream.png', 'cli.png', 'cloudformation.png',
    'cloudfront.png', 'cloudsearch.png', 'cloudtrail.png', 'cloudwatch.png', 'data-pipeline.png',
    'direct-connect.png', 'dotnet.png', 'dynamodb.png', 'ec2.png', 'eclipse.png', 'elasticache.png',
    'elastic-beanstalk.png', 'elb.png', 'emr.png', 'glacier.png', 'iam.png', 'ios.png', 'java.png',
    'nodejs.png', 'opsworks.png', 'php.png', 'powershell.png', 'python.png', 'rds.png', 'redshift.png',
    'route53.png', 'ruby.png', 's3.png', 'ses.png', 'sns.png', 'storage-gateway.png', 'swf.png',
    'transcoding.png', 'visual-studio.png', 'vpc.png'
];

// Iterate over all of the additional URLs and keep kicking off batches of up to 25 items 
// (tr)Tüm ek URL'leri yineleyin ve en fazla 25 öğe içeren grupları başlatmaya devam edin

while (urls.length > 0) {

    // Pull off up to 25 items from the list
    for (var i = params.RequestItems.Image.length; i < 25; i++) {

        // Nothing else to add to the batch if the input list is empty
        if (urls.length === 0) {
            break;
        }

        // Take a URL from the list and add a new PutRequest to the list of requests
        // targeted at the Image table
        url = urls.pop();
        params.RequestItems.Image.push(
            {
                PutRequest: {
                    Item: {
                        Id: url,
                        DateAdded: new Date().toISOString(),
                        VoteCount: 0
                    }
                }
            }
        );
    }
    // Kick off this batch of requests
    console.log("Calling BatchWriteItem with a new batch of "
            + params.RequestItems.Image.length + " items");
    docClient.batchWrite(params, doBatchWriteItem);

    // Initialize a new blank params variable
    params = {
        RequestItems: {
            Image: []
        }
    };
}

// A callback that repeatedly calls BatchWriteItem until all of the writes have completed
function doBatchWriteItem(err, data) {
    if (err) {
        ppJson(err); // an error occurred
    } else {
        if ('UnprocessedItems' in data && 'Image' in data.UnprocessedItems) {
            // More data. Call again with the unprocessed items.
            var params = {
                RequestItems: data.UnprocessedItems
            };
            console.log("Calling BatchWriteItem again to retry "
                + params.RequestItems.Image.length + "UnprocessedItems");
            docClient.batchWrite(params, doBatchWriteItem);
        } else {
            console.log("BatchWriteItem processed all items in the batch");
        }
    }





















